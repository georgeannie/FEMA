install.packages(dply)
library('dplyr')
library(dplyr)
install.packages('dplyr')
install.packages('tidyverse')
install.packages('RJDBC')
install.packages('DBI')
install.packages('tidyr')
install.packages('stringr')
install.packages('lubridicate')
install.packages('lubridate')
install.packages('ggplot2')
install.packages('ggviz')
install.packages('ggvis')
install.packages('leaflet')
install.packages('DT')
install.packages('car')
install.packages('randomForest ')
install.packages('randomForest')
install.packages('caret')
install.packages('survival')
install.packages('glmnet')
install.packages('tidymodels')
install.packages('zoo')
install.packages('xls')
install.packages('shiny')
install.packages('RMarkdown')
install.packages('data.table')
install.packages('jsonlite')
devtools::install_github("react-R/reactR")
install.packages('devtools')
devtools::install_github("react-R/reactR")
install.packages("swirl")
library("swirl")
swirl()
sample()
?sample
sample(1:6, 4, replace = TRUE)
exit
# sample from an uniform distribution
stats::runif(1, min = 0, max = 1)
# sample from an exponential distribution
stats::rexp(1)
# sample from a normal distribution
stats::rnorm(1)
# sample from a log normal distribution
stats::rlnorm(1)
library(tidyverse)
RUNS <- 1000
DECISION.STEPS <- 12
simulations <- rerun(RUNS, replicate(DECISION.STEPS, runif(1) %>% calculate_return())) %>%
set_names(paste0("sim", 1:RUNS)) %>%
map(~ accumulate(., ~ .x * .y)) %>%
map_dfr(~ tibble(value = .x, step = 1:DECISION.STEPS), .id = "simulation")
calculate_return <- function(alpha) {
risk_free_rate <- 1.03
risky_rate <- rnorm(1) * 0.05 + 1
(1 - alpha) * risk_free_rate + alpha * risky_rate
}
simulations <- rerun(RUNS, replicate(DECISION.STEPS, runif(1) %>% calculate_return())) %>%
set_names(paste0("sim", 1:RUNS)) %>%
map(~ accumulate(., ~ .x * .y)) %>%
map_dfr(~ tibble(value = .x, step = 1:DECISION.STEPS), .id = "simulation")
View(simulations)
View(simulations)
simulations %>%
ggplot(aes(x = step, y = value)) +
geom_line(aes(color = simulation)) +
theme(legend.position = "none") +
ggtitle("Simulations of returns from asset allocation")
plot(cars)
fema = read.csv('mock_data.csv')
setwd("~/Desktop/Personal/2022/FEMA")
fema = read.csv('mock_data.csv')
View(fema)
#Distinct reponders
nunique(fema$responder_id)
#Distinct reponders
unique(fema$responder_id)
#Distinct reponders
len(unique(fema$responder_id))
#Distinct reponders
number(unique(fema$responder_id))
#Distinct reponders
count(unique(fema$responder_id))
#Distinct reponders
unique(fema$responder_id)
#Distinct reponders
distinctfema, responder_id)
#Distinct reponders
distinct(fema, responder_id)
library(dplyr)
library(tidyr)
#Distinct reponders
distinct(fema, responder_id)
library(tidyr)
fema = read.csv('mock_data.csv')
#Distinct reponders
distinct(fema, responder_id)
#Distinct reponders
count(distinct(fema, responder_id))
#tasks for each responder
fema %>% group_by(responder_id)
#tasks for each responder
fema %>% group_by(responder_id) %>% count()
#request for each responder
fema %>% group_by(responder_id) %>% mutate('Count'= count())
#request for each responder
fema %>% group_by(responder_id) %>% mutate(count = n())
#request for each responder
fema %>% group_by(responder_id) %>% tally()
#Distinct reponders = 30
cnt = count(distinct(fema, responder_id))
#request for each responder
fema %>% group_by(responder_id) %>% tally()
#average number of tasks per responder
fema %>% group_by(responder_id) %>% tally()/ cnt
#average number of tasks per responder
nrow(fema) / cnt
#min time
min(fema$request_received_time)
min(fema$deployment_start_time)
min(fema$deployment_start_time)
min(fema$deployment_end_time)
fema$deployment_time_in_hours = with(fema, difftime(deployment_start_time,
deployment_end_time,
units="hours") )
View(fema)
fema$deployment_time_in_hours = with(fema, difftime(deployment_end_time,
deployment_start_time,
units="hours") )
View(fema)
fema$request_dayofweek = weekdays(as.Date(fema$request_received_time))
View(fema)
fema %>% group_by(request_dayofweek) %>% (count = n())
fema %>% group_by(request_dayofweek) %>% tally()
fema$deployment_start_dayofweek = weekdays(as.Date(fema$deployment_start_time))
fema$deployment_end_dayofweek = weekdays(as.Date(fema$deployment_end_time))
fema %>% group_by(deployment_start_dayofweek) %>% tally()
fema %>% group_by(deployment_start_dayofweek) %>% tally()
fema %>% group_by(deployment_end_dayofweek) %>% tally()
fema$deployment_delay_in_hours = with(fema, difftime(deployment_start_time,
request_received_time,
units="hours") )
View(fema)
fema$duration_req_to_end = with(fema, difftime(deployment_end_time,
request_received_time,
units="hours") )
View(fema)
# Feature engineering
fema$deployment_time_in_hours = with(fema, difftime(deployment_end_time,
deployment_start_time,
units="days") )
library(dplyr)
library(ggplot2)
library(tidyr)
fema = read.csv('mock_data.csv')
#EDA
#Distinct reponders = 30
cnt = count(distinct(fema, responder_id))
#request for each responder
fema %>% group_by(responder_id) %>% tally()
#average number of tasks per responder = 7
nrow(fema) / cnt
#min time
min(fema$request_received_time)
min(fema$deployment_start_time)
min(fema$deployment_end_time)
# Feature engineering
fema$deployment_time_in_days = with(fema, difftime(deployment_end_time,
deployment_start_time,
units="days") )
fema$deployment_delay_in_days = with(fema, difftime(deployment_start_time,
request_received_time,
units="days") )
fema$duration_req_to_end = with(fema, difftime(deployment_end_time,
request_received_time,
units="days") )
fema$request_dayofweek = weekdays(as.Date(fema$request_received_time))
fema$deployment_start_dayofweek = weekdays(as.Date(fema$deployment_start_time))
fema$deployment_end_dayofweek = weekdays(as.Date(fema$deployment_end_time))
fema %>% group_by(request_dayofweek) %>% tally()
fema %>% group_by(deployment_start_dayofweek) %>% tally()
fema %>% group_by(deployment_end_dayofweek) %>% tally()
View(fema)
fema = read.csv('mock_data.csv')
#EDA
#Distinct reponders = 30
cnt = count(distinct(fema, responder_id))
#request for each responder
fema %>% group_by(responder_id) %>% tally()
#average number of tasks per responder = 7
nrow(fema) / cnt
#min time
min(fema$request_received_time)
min(fema$deployment_start_time)
min(fema$deployment_end_time)
# Feature engineering
fema$deployment_time_in_days = with(fema, difftime(deployment_end_time,
deployment_start_time,
units="days") )
fema$deployment_delay_in_days = with(fema, difftime(deployment_start_time,
request_received_time,
units="days") )
fema$duration_req_to_end = with(fema, difftime(deployment_end_time,
request_received_time,
units="days") )
fema$request_dayofweek = weekdays(as.Date(fema$request_received_time))
fema$deployment_start_dayofweek = weekdays(as.Date(fema$deployment_start_time))
fema %>% group_by(request_dayofweek) %>% tally()
fema %>% group_by(deployment_start_dayofweek) %>% tally()
fema %>% group_by(deployment_end_dayofweek) %>% tally()
library(dplyr)
library(ggplot2)
library(tidyr)
fema = read.csv('mock_data.csv')
#EDA
#Distinct reponders = 30
cnt = count(distinct(fema, responder_id))
#request for each responder
fema %>% group_by(responder_id) %>% tally()
#average number of tasks per responder = 7
nrow(fema) / cnt
#min time
min(fema$request_received_time)
min(fema$deployment_start_time)
min(fema$deployment_end_time)
# Feature engineering
fema$deployment_time_in_days = with(fema, difftime(deployment_end_time,
deployment_start_time,
units="days") )
fema$deployment_delay_in_days = with(fema, difftime(deployment_start_time,
request_received_time,
units="days") )
fema$request_dayofweek = weekdays(as.Date(fema$request_received_time))
fema$deployment_start_dayofweek = weekdays(as.Date(fema$deployment_start_time))
fema$deployment_end_dayofweek = weekdays(as.Date(fema$deployment_end_time))
fema %>% group_by(request_dayofweek) %>% tally()
fema %>% group_by(deployment_start_dayofweek) %>% tally()
fema %>% group_by(deployment_end_dayofweek) %>% tally()
fema %>% group_by(responder_id) %>% sum(deployment_time_in_days)
fema %>% group_by(responder_id) %>% sum(deployment_time_in_days)
fema %>% group_by(responder_id) %>% summarize(Total_hours_worked = sum(deployment_time_in_days))
fema$request_month = months(as.Date(fema$request_received_time), 'month')
fema$request_month = months(as.Date(fema$request_received_time), month)
fema$request_month = months(as.Date(fema$request_received_time), '%b')
fema$request_month = months(as.Date(fema$request_received_time))
View(fema)
ema %>% group_by(request_month) %>% tally()
fema %>% group_by(request_month) %>% tally()
fema %>% group_by(request_month) %>% tally() %>% sort(request_month)
fema %>% group_by(responder_id) %>% summarize(Total_hours_worked = sum(deployment_time_in_days))
sum_hours = fema %>% group_by(responder_id) %>% summarize(Total_hours_worked = sum(deployment_time_in_days))
View(sum_hours)
hist(sum_hours$Total_hours_worked)
fema %>% sort(responder_id, request_received_time)
fema %>% arrange( responder_id, request_received_time)
test = fema %>% arrange( responder_id, request_received_time)
View(test)
test = fema %>% arrange( responder_id, request_received_time) %>%
lag(deployment_start_time)
test = fema %>% arrange( responder_id, request_received_time) %>%
mutate(deployment_lag=lag(deployment_start_time))
View(test)
test = fema %>% arrange( responder_id, request_received_time) %>%
mutate(deployment_lag=lag(deployment_end_time),
new_assignment_lag = deployment_start_time -deployment_lag)
test$new_assignment_lag = with(test, difftime(deployment_start_time,
deployment_lag,
units="days") )
test = fema %>% arrange( responder_id, request_received_time) %>%
mutate(deployment_lag=lag(deployment_end_time))
test$new_assignment_lag = with(test, difftime(deployment_start_time,
deployment_lag,
units="days") )
test = fema %>% arrange( responder_id, request_received_time) %>%
mutate(deployment_lag=lag(deployment_end_time, n=1, order_by = responder_id))
test$new_assignment_lag = with(test, difftime(deployment_start_time,
deployment_lag,
units="days") )
test = fema %>% group_by( responder_id, request_received_time) %>%
mutate(deployment_lag=lag(deployment_end_time, n=1, order_by = responder_id))
test$new_assignment_lag = with(test, difftime(deployment_start_time,
deployment_lag,
units="days") )
test = fema %>% group_by( responder_id) %>%
mutate(deployment_lag=lag(deployment_end_time, n=1, order_by = responder_id))
test$new_assignment_lag = with(test, difftime(deployment_start_time,
deployment_lag,
units="days") )
fema = fema %>% group_by( responder_id) %>%
mutate(deployment_lag=lag(deployment_end_time, n=1, order_by = responder_id))
fema$new_assignment_lag = with(test, difftime(deployment_start_time,
deployment_lag,
units="days") )
fema %>% group_by(request_dayofweek) %>% tally()
fema %>% group_by(deployment_start_dayofweek) %>% tally()
fema %>% group_by(deployment_end_dayofweek) %>% tally()
sum_hours = fema %>% group_by(responder_id) %>% summarize(Total_hours_worked = sum(deployment_time_in_days))
fema %>% group_by(request_month) %>% tally() %>% sort(request_month)
shiny::runApp('Kellog_northwestern_university_sinter-master/Sinter_project')
install.packages(('Metrics'))
runApp('Kellog_northwestern_university_sinter-master/Sinter_project')
# increase the font size for x and y axis
xgb.ggplt+theme( text = element_text(size = 10),
axis.text.x = element_text(size = 10, angle = 45, hjust = 1)) +
geom_bar(fill="blue",width=0.5,stat="identity")  +
theme(legend.position = "none")
runApp('Kellog_northwestern_university_sinter-master/Sinter_project')
install.packages('ggcorrplot')
runApp('Kellog_northwestern_university_sinter-master/Sinter_project')
install.packages('ranger')
install.packages('GGally')
install.packages("GGally")
runApp('Kellog_northwestern_university_sinter-master/Sinter_project')
runApp('Kellog_northwestern_university_sinter-master/Sinter_project')
install.packages('ranger')
runApp('Kellog_northwestern_university_sinter-master/Sinter_project')
